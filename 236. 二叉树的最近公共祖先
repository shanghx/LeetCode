/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //子函数，用来保存路径
    bool getpath(TreeNode* root,TreeNode* node,stack<TreeNode*>& path)
    {
        if(root==NULL)
            return false;
        path.push(root);
        if(root==node)
            return true;
        
        if(getpath(root->left,node,path))
            return true;
        if(getpath(root->right,node,path))
            return true;
        path.pop();
        return false;
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        //保存路径,然后比较
        stack<TreeNode*> path1;
        stack<TreeNode*> path2;
        
        getpath(root,p,path1);
        getpath(root,q,path2);
        
        while(path1.size()!= path2.size())
        {
            if(path1.size()>path2.size())
                path1.pop();
            else path2.pop();
        }
        
        while(path1.top()!=path2.top())
        {
            path1.pop();
            path2.pop();
        }
        return path1.top();
        
    }
};
